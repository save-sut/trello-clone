{"version":3,"sources":["actions/listActions.js","actions/cardsActions.js","actions/index.js","reducers/listReducer.js","reducers/listOrderReducer.js","reducers/cardsReducer.js","reducers/index.js","store/index.js","components/TrelloForm.js","components/TrelloButton.js","components/TrelloCard.js","components/TrelloOpenForm.js","components/TrelloCreate.js","components/TrelloList.js","components/App.js","serviceWorker.js","index.js"],"names":["addList","title","id","uuid","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","EDIT_CARD","DELETE_CARD","EDIT_LIST_TITLE","DELETE_LIST","initialState","listsReducer","state","arguments","length","undefined","action","_action$payload","newList","concat","cards","Object","objectSpread","defineProperty","_action$payload2","list","push","_action$payload3","_list$cards","card","splice","apply","toConsumableArray","_listEnd$cards","_objectSpread5","listStart","listEnd","_action$payload4","newCards","filter","cardID","_action$payload5","newTitle","newState","listOrderReducer","newId","pulledOutList","cardsReducer","newCard","newText","combineReducers","lists","listReduscer","listOrder","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","Container","styled","div","_templateObject","StyledCard","Card","_templateObject2","StyledTextArea","Textarea","_templateObject3","ButtonContainer","_templateObject4","StyledIcon","Icon","_templateObject5","TrelloForm","React","memo","_ref","_ref$text","onChange","closeForm","children","placeholder","react_default","a","createElement","autoFocus","value","e","onBlur","onMouseDown","StyledButton","Button","TrelloButton_templateObject","TrelloButton","onClick","variant","CardContainer","TrelloCard_templateObject","EditButton","TrelloCard_templateObject2","DeleteButton","TrelloCard_templateObject3","TrelloCard","index","dispatch","_useState","useState","_useState2","slicedToArray","isEditing","setIsEditing","_useState3","_useState4","cardText","setText","handleDeleteCard","deleteCard","handleChange","target","saveCard","preventDefault","editCard","components_TrelloForm","components_TrelloButton","react_beautiful_dnd_esm","String","provided","assign","ref","innerRef","draggableProps","dragHandleProps","onDoubleClick","fontSize","CardContent","Typography","gutterBottom","connect","TrelloOpenForm","buttonTextOpacity","buttonTextColor","buttonTextBackground","OpenFormButton","TrelloOpenForm_templateObject","style","flexShrink","TrelloCreate","formOpen","openForm","_this","setState","handleInputChange","handleAddList","props","handleAddCard","_this$props","renderOpenForm","buttonText","TrelloCreate_templateObject","this","components_TrelloOpenForm","PureComponent","ListContainer","TrelloList_templateObject","StyledInput","input","TrelloList_templateObject2","TitleContainer","TrelloList_templateObject3","TrelloList_templateObject4","ListTitle","h4","TrelloList_templateObject5","listTitle","setListTitle","handleFocus","select","handleFinishEditing","editTitle","handleDeleteList","deleteList","droppableId","onSubmit","onFocus","TrelloList_DeleteButton","droppableProps","map","components_TrelloCard","components_TrelloCreate","App_templateObject","App","onDragEnd","result","destination","source","direction","App_ListContainer","listCards","components_TrelloList","Boolean","window","location","hostname","match","store","createStore","persistor","persistStore","Store","GlobalStyle","createGlobalStyle","src_templateObject","ReactDOM","render","es","integration_react","loading","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99714658.chunk.js","sourcesContent":["import { CONSTANTS } from './../actions'\r\nimport uuid from 'uuidv4'\r\n\r\nexport const addList = title => {\r\n    const id = uuid()\r\n    return {\r\n        type: CONSTANTS.ADD_LIST,\r\n        payload: { title, id }\r\n    }\r\n}\r\n\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n    type\r\n) => {\r\n    return {\r\n        type: CONSTANTS.DRAG_HAPPENED,\r\n        payload: {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            type\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTitle = (listID, newTitle) => {\r\n    return {\r\n        type: CONSTANTS.EDIT_LIST_TITLE,\r\n        payload: {\r\n            listID,\r\n            newTitle\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteList = listID => {\r\n    return {\r\n        type: CONSTANTS.DELETE_LIST,\r\n        payload: {\r\n            listID\r\n        }\r\n    }\r\n}\r\n","import { CONSTANTS } from './../actions'\r\nimport uuid from 'uuidv4'\r\n\r\nexport const addCard = (listID, text) => {\r\n    const id = uuid()\r\n    return {\r\n        type: CONSTANTS.ADD_CARD,\r\n        payload: { listID, text, id }\r\n    }\r\n}\r\n\r\nexport const editCard = (id, listID, newText) => {\r\n    return {\r\n        type: CONSTANTS.EDIT_CARD,\r\n        payload: { id, listID, newText }\r\n    }\r\n}\r\n\r\nexport const deleteCard = (id, listID) => {\r\n    return {\r\n        type: CONSTANTS.DELETE_CARD,\r\n        payload: { id, listID }\r\n    }\r\n}\r\n","export * from './listActions'\r\nexport * from './cardsActions'\r\n\r\nexport const CONSTANTS = {\r\n    ADD_CARD: 'ADD_CARD',\r\n    ADD_LIST: 'ADD_LIST',\r\n    DRAG_HAPPENED: 'DRAG_HAPPENED',\r\n    EDIT_CARD: 'EDIT_CARD',\r\n    DELETE_CARD: 'DELETE_CARD',\r\n    EDIT_LIST_TITLE: 'EDIT_LIST_TITLE',\r\n    DELETE_LIST: 'DELETE_LIST'\r\n}","import { CONSTANTS } from '../actions'\r\n\r\nconst initialState = {}\r\n\r\nconst listsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_LIST: {\r\n            const { title, id } = action.payload\r\n            const newList = {\r\n                title: title,\r\n                id: `list-${id}`,\r\n                cards: []\r\n            }\r\n\r\n            const newState = { ...state, [`list-${id}`]: newList }\r\n\r\n            return newState\r\n        }\r\n\r\n        case CONSTANTS.ADD_CARD: {\r\n            const { listID, id } = action.payload\r\n            const list = state[listID]\r\n            list.cards.push(`card-${id}`)\r\n            return { ...state, [listID]: list }\r\n        }\r\n\r\n        case CONSTANTS.DRAG_HAPPENED:\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexEnd,\r\n                droppableIndexStart,\r\n                type\r\n            } = action.payload\r\n\r\n            // draggin lists around - the listOrderReducer should handle this\r\n            if (type === 'list') {\r\n                return state\r\n            }\r\n\r\n            // in the same list\r\n            if (droppableIdStart === droppableIdEnd) {\r\n                const list = state[droppableIdStart]\r\n                const card = list.cards.splice(droppableIndexStart, 1)\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n                return { ...state, [droppableIdStart]: list }\r\n            }\r\n\r\n            // other list\r\n            if (droppableIdStart !== droppableIdEnd) {\r\n                // find the list where the drag happened\r\n                const listStart = state[droppableIdStart]\r\n                // pull out the card from this list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1)\r\n                // find the list where the drag ended\r\n                const listEnd = state[droppableIdEnd]\r\n\r\n                // put the card in the new list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card)\r\n                return {\r\n                    ...state,\r\n                    [droppableIdStart]: listStart,\r\n                    [droppableIdEnd]: listEnd\r\n                }\r\n            }\r\n            return state\r\n\r\n        case CONSTANTS.DELETE_CARD: {\r\n            const { listID, id } = action.payload\r\n\r\n            const list = state[listID]\r\n            const newCards = list.cards.filter(cardID => cardID !== id)\r\n\r\n            return { ...state, [listID]: { ...list, cards: newCards } }\r\n        }\r\n\r\n        case CONSTANTS.EDIT_LIST_TITLE: {\r\n            const { listID, newTitle } = action.payload\r\n            const list = state[listID]\r\n            list.title = newTitle\r\n            return { ...state, [listID]: list }\r\n        }\r\n\r\n        case CONSTANTS.DELETE_LIST: {\r\n            const { listID } = action.payload\r\n            const newState = state\r\n            delete newState[listID]\r\n            return newState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default listsReducer\r\n","import { CONSTANTS } from '../actions'\r\n// let listID = 0\r\nconst initialState = []\r\n\r\nconst listOrderReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_LIST: {\r\n            const {id} = action.payload\r\n            const newId = `list-${id}`\r\n            return [...state, newId]\r\n        }\r\n\r\n        case CONSTANTS.DRAG_HAPPENED: {\r\n            const {\r\n                droppableIndexEnd,\r\n                droppableIndexStart,\r\n                type\r\n            } = action.payload\r\n            const newState = state\r\n\r\n            // draggin lists around\r\n            if (type === 'list') {\r\n                const pulledOutList = newState.splice(droppableIndexStart, 1)\r\n                newState.splice(droppableIndexEnd, 0, ...pulledOutList)\r\n                return [...newState]\r\n            }\r\n            return state\r\n        }\r\n\r\n        case CONSTANTS.DELETE_LIST: {\r\n            const { listID } = action.payload\r\n            return state.filter(id => id !== listID)\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default listOrderReducer\r\n","import { CONSTANTS } from '../actions'\r\n\r\nconst initialState = {}\r\n\r\nconst cardsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_CARD: {\r\n            const { text, listID, id } = action.payload\r\n\r\n            const newCard = {\r\n                text,\r\n                id: `card-${id}`,\r\n                list: listID\r\n            }\r\n\r\n            return { ...state, [`card-${id}`]: newCard }\r\n        }\r\n\r\n        case CONSTANTS.EDIT_CARD: {\r\n            const { id, newText } = action.payload\r\n            const card = state[id]\r\n            card.text = newText\r\n            return { ...state, [`card-${id}`]: card }\r\n        }\r\n\r\n        case CONSTANTS.DELETE_CARD: {\r\n            const { id } = action.payload\r\n            const newState = state\r\n            delete newState[id]\r\n            return newState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default cardsReducer\r\n","import { combineReducers } from 'redux'\r\nimport listReduscer from './listReducer'\r\nimport listOrderReducer from './listOrderReducer'\r\nimport cardsReducer from './cardsReducer'\r\n\r\nexport default combineReducers({\r\n    lists: listReduscer,\r\n    listOrder: listOrderReducer,\r\n    cards: cardsReducer\r\n})","import { createStore } from 'redux'\r\nimport rootReducer from './../reducers'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport default () => {\r\n    let store = createStore(persistedReducer)\r\n    let persistor = persistStore(store)\r\n    return { store, persistor }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport Textarea from 'react-textarea-autosize'\r\nimport Card from '@material-ui/core/Card'\r\n\r\nconst Container = styled.div`\r\n    width: 284px;\r\n    margin-bottom: 8px;\r\n`\r\n\r\nconst StyledCard = styled(Card)`\r\n    min-height: 85px;\r\n    padding: 6px 8px 2px;\r\n`\r\n\r\nconst StyledTextArea = styled(Textarea)`\r\n    resize: none;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    outline: none;\r\n    border: none;\r\n`\r\n\r\nconst ButtonContainer = styled.div`\r\n    margin-top: 8px;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-left: 8px;\r\n`\r\n\r\nconst StyledIcon = styled(Icon)`\r\n    margin-left: 8px;\r\n    cursor: pointer;\r\n`\r\n\r\nconst TrelloForm = React.memo(\r\n    ({ list, text = '', onChange, closeForm, children }) => {\r\n        const placeholder = list\r\n            ? 'Enter list title...'\r\n            : 'Enter a title for this card...'\r\n\r\n        return (\r\n            <Container>\r\n                <StyledCard>\r\n                    <StyledTextArea\r\n                        placeholder={placeholder}\r\n                        autoFocus\r\n                        value={text}\r\n                        onChange={e => onChange(e)}\r\n                        onBlur={closeForm}\r\n                    />\r\n                </StyledCard>\r\n                <ButtonContainer>\r\n                    {children}\r\n                    <StyledIcon onMouseDown={closeForm}>close</StyledIcon>\r\n                </ButtonContainer>\r\n            </Container>\r\n        )\r\n    }\r\n)\r\n\r\nexport default TrelloForm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nconst StyledButton = styled(Button)`\r\n    && {\r\n        color: white;\r\n        background: #5aac44;\r\n    }\r\n`\r\n\r\nconst TrelloButton = ({ children, onClick }) => {\r\n    return (\r\n        <StyledButton variant=\"contained\" onMouseDown={onClick}>\r\n            {children}\r\n        </StyledButton>\r\n    )\r\n}\r\n\r\nexport default TrelloButton\r\n","import React, { useState } from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport TrelloForm from './TrelloForm'\r\nimport { editCard, deleteCard } from './../actions'\r\nimport { connect } from 'react-redux'\r\nimport TrelloButton from './TrelloButton'\r\n\r\nconst CardContainer = styled.div`\r\n    margin: 0 0 8px 0;\r\n    position: relative;\r\n    max-width: 100%;\r\n    word-wrap: break-word;\r\n`\r\n\r\nconst EditButton = styled(Icon)`\r\n    position: absolute;\r\n    display: none;\r\n    right: 5px;\r\n    top: 5px;\r\n    opacity: 0.5;\r\n    ${CardContainer}:hover & {\r\n        display: block;\r\n        cursor: pointer;\r\n    }\r\n    &:hover {\r\n        opacity: 0.8;\r\n    }\r\n`\r\n\r\nconst DeleteButton = styled(Icon)`\r\n    position: absolute;\r\n    display: none;\r\n    right: 5px;\r\n    bottom: 5px;\r\n    opacity: 0.5;\r\n    ${CardContainer}:hover & {\r\n        display: block;\r\n        cursor: pointer;\r\n    }\r\n    &:hover {\r\n        opacity: 0.8;\r\n    }\r\n`\r\n\r\nconst TrelloCard = React.memo(({ text, id, listID, index, dispatch }) => {\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [cardText, setText] = useState(text)\r\n\r\n    const closeForm = () => {\r\n        setIsEditing(false)\r\n    }\r\n\r\n    const handleDeleteCard = () => {\r\n        dispatch(deleteCard(id, listID))\r\n    }\r\n\r\n    const handleChange = e => {\r\n        setText(e.target.value)\r\n    }\r\n\r\n    const saveCard = e => {\r\n        // run redux action\r\n        e.preventDefault()\r\n        dispatch(editCard(id, listID, cardText))\r\n        setIsEditing(false)\r\n    }\r\n\r\n    const renderEditForm = () => {\r\n        return (\r\n            <TrelloForm\r\n                text={cardText}\r\n                onChange={handleChange}\r\n                closeForm={closeForm}>\r\n                <TrelloButton onClick={saveCard}>Save</TrelloButton>\r\n            </TrelloForm>\r\n        )\r\n    }\r\n\r\n    const renderCard = () => {\r\n        return (\r\n            <Draggable draggableId={String(id)} index={index}>\r\n                {provided => (\r\n                    <CardContainer\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        onDoubleClick={() => setIsEditing(true)}>\r\n                        <Card>\r\n                            <EditButton\r\n                                onMouseDown={() => setIsEditing(true)}\r\n                                fontSize=\"small\">\r\n                                edit\r\n                            </EditButton>\r\n                            <DeleteButton\r\n                                fontSize=\"small\"\r\n                                onMouseDown={handleDeleteCard}>\r\n                                delete\r\n                            </DeleteButton>\r\n                            <CardContent>\r\n                                <Typography gutterBottom>{text}</Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </CardContainer>\r\n                )}\r\n            </Draggable>\r\n        )\r\n    }\r\n\r\n    return isEditing ? renderEditForm() : renderCard()\r\n})\r\n\r\nexport default connect()(TrelloCard)\r\n","import React from 'react'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport styled from 'styled-components'\r\n\r\nconst TrelloOpenForm = ({ list, children, onClick }) => {\r\n    const buttonTextOpacity = list ? 1 : 0.5\r\n    const buttonTextColor = list ? 'white' : 'inherit'\r\n    const buttonTextBackground = list ? 'rgba(0,0,0,.15)' : 'inherit'\r\n\r\n    const OpenFormButton = styled.div`\r\n        display: flex;\r\n        align-items: center;\r\n        cursor: pointer;\r\n        border-radius: 3px;\r\n        height: 36px;\r\n        margin-left: 8px;\r\n        width: 300px;\r\n        padding-left: 10px;\r\n        padding-right: 10px;\r\n        opacity: ${buttonTextOpacity};\r\n        color: ${buttonTextColor};\r\n        background-color: ${buttonTextBackground};\r\n    `\r\n\r\n    return (\r\n        <OpenFormButton onClick={onClick}>\r\n            <Icon>add</Icon>\r\n            <p style={{ flexShrink: 0 }}>{children}</p>\r\n        </OpenFormButton>\r\n    )\r\n}\r\n\r\nexport default TrelloOpenForm\r\n","import React from 'react'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport TrelloButton from './TrelloButton'\r\nimport { connect } from 'react-redux'\r\nimport { addList, addCard } from '../actions'\r\nimport styled from 'styled-components'\r\nimport TrelloForm from './TrelloForm'\r\nimport TrelloOpenForm from './TrelloOpenForm'\r\n\r\nclass TrelloCreate extends React.PureComponent {\r\n    state = {\r\n        formOpen: false,\r\n        text: ''\r\n    }\r\n\r\n    openForm = () => {\r\n        this.setState({\r\n            formOpen: true\r\n        })\r\n    }\r\n\r\n    closeForm = () => {\r\n        this.setState({\r\n            formOpen: false\r\n        })\r\n    }\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleAddList = () => {\r\n        const { dispatch } = this.props\r\n        const { text } = this.state\r\n\r\n        if (text) {\r\n            this.setState({\r\n                text: ''\r\n            })\r\n            dispatch(addList(text))\r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    handleAddCard = () => {\r\n        const { dispatch, listID } = this.props\r\n        const { text } = this.state\r\n\r\n        if (text) {\r\n            this.setState({\r\n                text: ''\r\n            })\r\n            dispatch(addCard(listID, text))\r\n        }\r\n    }\r\n\r\n    renderOpenForm = () => {\r\n        const { list } = this.props\r\n\r\n        const buttonText = list ? 'Add another list' : 'Add another card'\r\n        const buttonTextOpacity = list ? 1 : 0.5\r\n        const buttonTextColor = list ? 'white' : 'inherit'\r\n        const buttonTextBackground = list ? 'rgba(0,0,0,.15)' : 'inherit'\r\n\r\n        const OpenFormButton = styled.div`\r\n            display: flex;\r\n            align-items: center;\r\n            cursor: pointer;\r\n            border-radius: 3px;\r\n            height: 36px;\r\n            margin-left: 8px;\r\n            width: 300px;\r\n            padding-left: 10px;\r\n            padding-right: 10px;\r\n            opacity: ${buttonTextOpacity};\r\n            color: ${buttonTextColor};\r\n            background-color: ${buttonTextBackground};\r\n        `\r\n\r\n        return (\r\n            <OpenFormButton onClick={this.openForm}>\r\n                <Icon>add</Icon>\r\n                <p style={{ flexShrink: 0 }}>{buttonText}</p>\r\n            </OpenFormButton>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { text } = this.state\r\n        const { list } = this.props\r\n        return this.state.formOpen ? (\r\n            <TrelloForm\r\n                text={text}\r\n                onChange={this.handleInputChange}\r\n                closeForm={this.closeForm}>\r\n                <TrelloButton\r\n                    onClick={list ? this.handleAddList : this.handleAddCard}>\r\n                    {list ? 'Add List' : 'Add Card'}\r\n                </TrelloButton>\r\n            </TrelloForm>\r\n        ) : (\r\n            <TrelloOpenForm list={list} onClick={this.openForm}>\r\n                {list ? 'Add another list' : 'Add another card'}\r\n            </TrelloOpenForm>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(TrelloCreate)\r\n","import React, { useState } from 'react'\r\nimport TrelloCard from './TrelloCard'\r\nimport TrelloCreate from './TrelloCreate'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport { editTitle, deleteList } from './../actions'\r\nimport Icon from '@material-ui/core/Icon'\r\n\r\nconst ListContainer = styled.div`\r\n    background-color: #dfe3e6;\r\n    border-radius: 3px;\r\n    width: 300px;\r\n    height: 100%;\r\n    padding: 8px;\r\n    margin-right: 8px;\r\n\r\n    h4 {\r\n        margin: 10px;\r\n\r\n        color: #172b4d;\r\n        font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\r\n            Noto Sans, Ubuntu, Droid Sans, Helvetica Neue, sans-serif;\r\n        font-size: 14px;\r\n    }\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n    width: 100%;\r\n    height: 100%;\r\n    border: none;\r\n    outline-color: blue;\r\n    border-radius: 3px;\r\n    margin-bottom: 3px;\r\n    padding: 5px;\r\n`\r\n\r\nconst TitleContainer = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    cursor: pointer;\r\n`\r\n\r\nconst DeleteButton = styled(Icon)`\r\n    cursor: pointer;\r\n`\r\n\r\nconst ListTitle = styled.h4`\r\n    transition: background 0.3s ease-in;\r\n    ${TitleContainer}:hover & {\r\n        background: #ccc;\r\n    }\r\n`\r\n\r\nconst TrelloList = ({ title, cards, listID, index, dispatch }) => {\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [listTitle, setListTitle] = useState(title)\r\n\r\n    const renderEditInput = () => {\r\n        return (\r\n            <from onSubmit={handleFinishEditing}>\r\n                <StyledInput\r\n                    type=\"text\"\r\n                    value={listTitle}\r\n                    onChange={handleChange}\r\n                    autoFocus\r\n                    onFocus={handleFocus}\r\n                    onBlur={handleFinishEditing}\r\n                />\r\n            </from>\r\n        )\r\n    }\r\n\r\n    const handleFocus = e => {\r\n        e.target.select()\r\n    }\r\n\r\n    const handleChange = e => {\r\n        e.preventDefault()\r\n        setListTitle(e.target.value)\r\n    }\r\n\r\n    const handleFinishEditing = () => {\r\n        setIsEditing(false)\r\n        dispatch(editTitle(listID, listTitle))\r\n    }\r\n\r\n    const handleDeleteList = () => {\r\n        dispatch(deleteList(listID))\r\n    }\r\n\r\n    return (\r\n        <Draggable draggableId={String(listID)} index={index}>\r\n            {provided => (\r\n                <ListContainer\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                    {...provided.dragHandleProps}>\r\n                    <Droppable droppableId={String(listID)} type=\"card\">\r\n                        {provided => (\r\n                            <div>\r\n                                <div>\r\n                                    {isEditing ? (\r\n                                        renderEditInput()\r\n                                    ) : (\r\n                                        <TitleContainer\r\n                                            onClick={() => setIsEditing(true)}>\r\n                                            <ListTitle>{listTitle}</ListTitle>\r\n                                            <DeleteButton\r\n                                                onClick={handleDeleteList}>\r\n                                                delete\r\n                                            </DeleteButton>\r\n                                        </TitleContainer>\r\n                                    )}\r\n                                </div>\r\n                                <div\r\n                                    {...provided.droppableProps}\r\n                                    ref={provided.innerRef}>\r\n                                    {cards.map((card, index) => (\r\n                                        <TrelloCard\r\n                                            key={card.id}\r\n                                            text={card.text}\r\n                                            id={card.id}\r\n                                            index={index}\r\n                                            listID={listID}\r\n                                        />\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                    <TrelloCreate listID={listID} />\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </ListContainer>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default connect()(TrelloList)\r\n","import React, { PureComponent } from 'react'\r\nimport TrelloList from './TrelloList'\r\nimport { connect } from 'react-redux'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { sort } from './../actions'\r\nimport styled from 'styled-components'\r\nimport TrelloCreate from './TrelloCreate'\r\n\r\nconst ListContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\n\r\nclass App extends PureComponent {\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId, type } = result\r\n        if (!destination) {\r\n            return\r\n        }\r\n\r\n        this.props.dispatch(\r\n            sort(\r\n                source.droppableId,\r\n                destination.droppableId,\r\n                source.index,\r\n                destination.index,\r\n                draggableId,\r\n                type\r\n            )\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { lists, listOrder, cards } = this.props\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <h2>Trello Board</h2>\r\n                <Droppable\r\n                    droppableId=\"all-lists\"\r\n                    direction=\"horizontal\"\r\n                    type=\"list\">\r\n                    {provided => (\r\n                        <ListContainer\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}>\r\n                            {listOrder.map((listID, index) => {\r\n                                const list = lists[listID]\r\n                                if (list) {\r\n                                    const listCards = list.cards.map(\r\n                                        cardID => cards[cardID]\r\n                                    )\r\n\r\n                                    return (\r\n                                        <TrelloList\r\n                                            listID={list.id}\r\n                                            key={list.id}\r\n                                            title={list.title}\r\n                                            cards={listCards}\r\n                                            index={index}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            })}\r\n                            {provided.placeholder}\r\n                            <TrelloCreate list />\r\n                        </ListContainer>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    lists: state.lists,\r\n    listOrder: state.listOrder,\r\n    cards: state.cards\r\n})\r\n\r\nexport default connect(mapStateToProps)(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport Store from './store'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport { createGlobalStyle } from 'styled-components'\nimport './index.css'\n// import $ from 'jquery'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nconst { persistor, store } = Store()\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    background-color: orange;\n    box-sizing: border-box;\n    transition: all 0.5s ease-in;\n  }\n`\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <GlobalStyle />\n            <App />\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n)\n\n// $(document).bind('DOMNodeRemoved', function(e) {\n//     console.log('Removed: ' + e.target.nodeName)\n// })\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}