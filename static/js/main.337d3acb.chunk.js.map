{"version":3,"sources":["actions/listActions.js","actions/cardsActions.js","actions/index.js","reducers/listReducer.js","reducers/listOrderReducer.js","reducers/cardsReducer.js","reducers/index.js","store/index.js","components/TrelloForm.js","components/TrelloButton.js","components/TrelloCard.js","components/TrelloOpenForm.js","components/TrelloCreate.js","components/TrelloList.js","components/App.js","serviceWorker.js","index.js"],"names":["addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","EDIT_CARD","DELETE_CARD","EDIT_LIST_TITLE","DELETE_LIST","cardID","initialState","listsReducer","state","arguments","length","undefined","action","newList","id","concat","cards","newState","Object","objectSpread","defineProperty","list","push","_action$payload","_list$cards","card","splice","apply","toConsumableArray","_listEnd$cards","_objectSpread5","listStart","listEnd","_action$payload2","newCards","filter","_action$payload3","newTitle","listOrderReducer","newId","pulledOutList","cardsReducer","newCard","newText","combineReducers","lists","listReduscer","listOrder","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","Container","styled","div","_templateObject","StyledCard","Card","_templateObject2","StyledTextArea","Textarea","_templateObject3","ButtonContainer","_templateObject4","StyledIcon","Icon","_templateObject5","TrelloForm","React","memo","_ref","_ref$text","onChange","closeForm","children","placeholder","react_default","a","createElement","autoFocus","value","e","onBlur","onMouseDown","StyledButton","Button","TrelloButton_templateObject","TrelloButton","onClick","variant","CardContainer","TrelloCard_templateObject","EditButton","TrelloCard_templateObject2","DeleteButton","TrelloCard_templateObject3","TrelloCard","index","dispatch","_useState","useState","_useState2","slicedToArray","isEditing","setIsEditing","_useState3","_useState4","cardText","setText","handleDeleteCard","deleteCard","handleChange","target","saveCard","preventDefault","editCard","components_TrelloForm","components_TrelloButton","react_beautiful_dnd_esm","String","provided","assign","ref","innerRef","draggableProps","dragHandleProps","onDoubleClick","fontSize","CardContent","Typography","gutterBottom","connect","TrelloOpenForm","buttonTextOpacity","buttonTextColor","buttonTextBackground","OpenFormButton","TrelloOpenForm_templateObject","style","flexShrink","TrelloCreate","formOpen","openForm","_this","setState","handleInputChange","handleAddList","props","handleAddCard","_this$props","renderOpenForm","buttonText","TrelloCreate_templateObject","this","components_TrelloOpenForm","PureComponent","ListContainer","TrelloList_templateObject","StyledInput","input","TrelloList_templateObject2","TitleContainer","TrelloList_templateObject3","TrelloList_templateObject4","ListTitle","h4","TrelloList_templateObject5","listTitle","setListTitle","handleFocus","select","handleFinishEditing","editTitle","handleDeleteList","deleteList","droppableId","onSubmit","onFocus","TrelloList_DeleteButton","droppableProps","map","components_TrelloCard","components_TrelloCreate","App_templateObject","App","onDragEnd","result","destination","source","direction","App_ListContainer","listCards","components_TrelloList","Boolean","window","location","hostname","match","store","createStore","persistor","persistStore","Store","GlobalStyle","createGlobalStyle","src_templateObject","ReactDOM","render","es","integration_react","loading","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.337d3acb.chunk.js","sourcesContent":["import { CONSTANTS } from './../actions'\r\n\r\nexport const addList = title => {\r\n    return {\r\n        type: CONSTANTS.ADD_LIST,\r\n        payload: title\r\n    }\r\n}\r\n\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n    type\r\n) => {\r\n    return {\r\n        type: CONSTANTS.DRAG_HAPPENED,\r\n        payload: {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            type\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTitle = (listID, newTitle) => {\r\n    return {\r\n        type: CONSTANTS.EDIT_LIST_TITLE,\r\n        payload: {\r\n            listID,\r\n            newTitle\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteList = listID => {\r\n    return {\r\n        type: CONSTANTS.DELETE_LIST,\r\n        payload: {\r\n            listID\r\n        }\r\n    }\r\n}\r\n","import { CONSTANTS } from './../actions'\r\n\r\nexport const addCard = (listID, text) => {\r\n    return {\r\n        type: CONSTANTS.ADD_CARD,\r\n        payload: { listID, text }\r\n    }\r\n}\r\n\r\nexport const editCard = (id, listID, newText) => {\r\n    return {\r\n        type: CONSTANTS.EDIT_CARD,\r\n        payload: { id, listID, newText }\r\n    }\r\n}\r\n\r\nexport const deleteCard = (id, listID) => {\r\n    return {\r\n        type: CONSTANTS.DELETE_CARD,\r\n        payload: { id, listID }\r\n    }\r\n}\r\n","export * from './listActions'\r\nexport * from './cardsActions'\r\n\r\nexport const CONSTANTS = {\r\n    ADD_CARD: 'ADD_CARD',\r\n    ADD_LIST: 'ADD_LIST',\r\n    DRAG_HAPPENED: 'DRAG_HAPPENED',\r\n    EDIT_CARD: 'EDIT_CARD',\r\n    DELETE_CARD: 'DELETE_CARD',\r\n    EDIT_LIST_TITLE: 'EDIT_LIST_TITLE',\r\n    DELETE_LIST: 'DELETE_LIST'\r\n}","import { CONSTANTS } from '../actions'\r\n\r\nlet listID = 0\r\nlet cardID = 0\r\n\r\nconst initialState = {}\r\n\r\nconst listsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_LIST: {\r\n            const newList = {\r\n                title: action.payload,\r\n                id: `list-${listID}`,\r\n                cards: []\r\n            }\r\n\r\n            const newState = { ...state, [`list-${listID}`]: newList }\r\n            listID += 1\r\n\r\n            return newState\r\n        }\r\n\r\n        case CONSTANTS.ADD_CARD: {\r\n            cardID += 1\r\n            const { listID } = action.payload\r\n            const list = state[listID]\r\n            list.cards.push(`card-${cardID}`)\r\n            return { ...state, [listID]: list }\r\n        }\r\n\r\n        case CONSTANTS.DRAG_HAPPENED:\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexEnd,\r\n                droppableIndexStart,\r\n                type\r\n            } = action.payload\r\n\r\n            // draggin lists around - the listOrderReducer should handle this\r\n            if (type === 'list') {\r\n                return state\r\n            }\r\n\r\n            // in the same list\r\n            if (droppableIdStart === droppableIdEnd) {\r\n                const list = state[droppableIdStart]\r\n                const card = list.cards.splice(droppableIndexStart, 1)\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n                return { ...state, [droppableIdStart]: list }\r\n            }\r\n\r\n            // other list\r\n            if (droppableIdStart !== droppableIdEnd) {\r\n                // find the list where the drag happened\r\n                const listStart = state[droppableIdStart]\r\n                // pull out the card from this list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1)\r\n                // find the list where the drag ended\r\n                const listEnd = state[droppableIdEnd]\r\n\r\n                // put the card in the new list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card)\r\n                return {\r\n                    ...state,\r\n                    [droppableIdStart]: listStart,\r\n                    [droppableIdEnd]: listEnd\r\n                }\r\n            }\r\n            return state\r\n\r\n        case CONSTANTS.DELETE_CARD: {\r\n            const { listID, id } = action.payload\r\n\r\n            const list = state[listID]\r\n            const newCards = list.cards.filter(cardID => cardID !== id)\r\n\r\n            return { ...state, [listID]: { ...list, cards: newCards } }\r\n        }\r\n\r\n        case CONSTANTS.EDIT_LIST_TITLE: {\r\n            const { listID, newTitle } = action.payload\r\n            const list = state[listID]\r\n            list.title = newTitle\r\n            return { ...state, [listID]: list }\r\n        }\r\n\r\n        case CONSTANTS.DELETE_LIST: {\r\n            const { listID } = action.payload\r\n            const newState = state\r\n            delete newState[listID]\r\n            return newState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default listsReducer\r\n","import { CONSTANTS } from '../actions'\r\nlet listID = 0\r\nconst initialState = ['list-0']\r\n\r\nconst listOrderReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_LIST: {\r\n            listID += 1\r\n            const newId = `list-${listID}`\r\n            return [...state, newId]\r\n        }\r\n\r\n        case CONSTANTS.DRAG_HAPPENED: {\r\n            const {\r\n                droppableIndexEnd,\r\n                droppableIndexStart,\r\n                type\r\n            } = action.payload\r\n            const newState = state\r\n\r\n            // draggin lists around\r\n            if (type === 'list') {\r\n                const pulledOutList = newState.splice(droppableIndexStart, 1)\r\n                newState.splice(droppableIndexEnd, 0, ...pulledOutList)\r\n                return [...newState]\r\n            }\r\n            return state\r\n        }\r\n\r\n        case CONSTANTS.DELETE_LIST: {\r\n            const { listID } = action.payload\r\n            return state.filter(id => id !== listID)\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default listOrderReducer\r\n","import { CONSTANTS } from '../actions'\r\n\r\nlet cardID = 0\r\n\r\nconst initialState = {}\r\n\r\nconst cardsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_CARD: {\r\n            const { text, listID } = action.payload\r\n\r\n            cardID += 1\r\n            const newCard = {\r\n                text,\r\n                id: `card-${cardID}`,\r\n                list: listID\r\n            }\r\n\r\n            return { ...state, [`card-${cardID}`]: newCard }\r\n        }\r\n\r\n        case CONSTANTS.EDIT_CARD: {\r\n            const { id, newText } = action.payload\r\n            const card = state[id]\r\n            card.text = newText\r\n            return { ...state, [`card-${id}`]: card }\r\n        }\r\n\r\n        case CONSTANTS.DELETE_CARD: {\r\n            const { id } = action.payload\r\n            const newState = state\r\n            delete newState[id]\r\n            return newState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default cardsReducer\r\n","import { combineReducers } from 'redux'\r\nimport listReduscer from './listReducer'\r\nimport listOrderReducer from './listOrderReducer'\r\nimport cardsReducer from './cardsReducer'\r\n\r\nexport default combineReducers({\r\n    lists: listReduscer,\r\n    listOrder: listOrderReducer,\r\n    cards: cardsReducer\r\n})","import { createStore } from 'redux'\r\nimport rootReducer from './../reducers'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport default () => {\r\n    let store = createStore(persistedReducer)\r\n    let persistor = persistStore(store)\r\n    return { store, persistor }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport Textarea from 'react-textarea-autosize'\r\nimport Card from '@material-ui/core/Card'\r\n\r\nconst Container = styled.div`\r\n    width: 284px;\r\n    margin-bottom: 8px;\r\n`\r\n\r\nconst StyledCard = styled(Card)`\r\n    min-height: 85px;\r\n    padding: 6px 8px 2px;\r\n`\r\n\r\nconst StyledTextArea = styled(Textarea)`\r\n    resize: none;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    outline: none;\r\n    border: none;\r\n`\r\n\r\nconst ButtonContainer = styled.div`\r\n    margin-top: 8px;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-left: 8px;\r\n`\r\n\r\nconst StyledIcon = styled(Icon)`\r\n    margin-left: 8px;\r\n    cursor: pointer;\r\n`\r\n\r\nconst TrelloForm = React.memo(\r\n    ({ list, text = '', onChange, closeForm, children }) => {\r\n        const placeholder = list\r\n            ? 'Enter list title...'\r\n            : 'Enter a title for this card...'\r\n\r\n        return (\r\n            <Container>\r\n                <StyledCard>\r\n                    <StyledTextArea\r\n                        placeholder={placeholder}\r\n                        autoFocus\r\n                        value={text}\r\n                        onChange={e => onChange(e)}\r\n                        onBlur={closeForm}\r\n                    />\r\n                </StyledCard>\r\n                <ButtonContainer>\r\n                    {children}\r\n                    <StyledIcon onMouseDown={closeForm}>close</StyledIcon>\r\n                </ButtonContainer>\r\n            </Container>\r\n        )\r\n    }\r\n)\r\n\r\nexport default TrelloForm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nconst StyledButton = styled(Button)`\r\n    && {\r\n        color: white;\r\n        background: #5aac44;\r\n    }\r\n`\r\n\r\nconst TrelloButton = ({ children, onClick }) => {\r\n    return (\r\n        <StyledButton variant=\"contained\" onMouseDown={onClick}>\r\n            {children}\r\n        </StyledButton>\r\n    )\r\n}\r\n\r\nexport default TrelloButton\r\n","import React, { useState } from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport TrelloForm from './TrelloForm'\r\nimport { editCard, deleteCard } from './../actions'\r\nimport { connect } from 'react-redux'\r\nimport TrelloButton from './TrelloButton'\r\n\r\nconst CardContainer = styled.div`\r\n    margin: 0 0 8px 0;\r\n    position: relative;\r\n    max-width: 100%;\r\n    word-wrap: break-word;\r\n`\r\n\r\nconst EditButton = styled(Icon)`\r\n    position: absolute;\r\n    display: none;\r\n    right: 5px;\r\n    top: 5px;\r\n    opacity: 0.5;\r\n    ${CardContainer}:hover & {\r\n        display: block;\r\n        cursor: pointer;\r\n    }\r\n    &:hover {\r\n        opacity: 0.8;\r\n    }\r\n`\r\n\r\nconst DeleteButton = styled(Icon)`\r\n    position: absolute;\r\n    display: none;\r\n    right: 5px;\r\n    bottom: 5px;\r\n    opacity: 0.5;\r\n    ${CardContainer}:hover & {\r\n        display: block;\r\n        cursor: pointer;\r\n    }\r\n    &:hover {\r\n        opacity: 0.8;\r\n    }\r\n`\r\n\r\nconst TrelloCard = React.memo(({ text, id, listID, index, dispatch }) => {\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [cardText, setText] = useState(text)\r\n\r\n    const closeForm = () => {\r\n        setIsEditing(false)\r\n    }\r\n\r\n    const handleDeleteCard = () => {\r\n        dispatch(deleteCard(id, listID))\r\n    }\r\n\r\n    const handleChange = e => {\r\n        setText(e.target.value)\r\n    }\r\n\r\n    const saveCard = e => {\r\n        // run redux action\r\n        e.preventDefault()\r\n        dispatch(editCard(id, listID, cardText))\r\n        setIsEditing(false)\r\n    }\r\n\r\n    const renderEditForm = () => {\r\n        return (\r\n            <TrelloForm\r\n                text={cardText}\r\n                onChange={handleChange}\r\n                closeForm={closeForm}>\r\n                <TrelloButton onClick={saveCard}>Save</TrelloButton>\r\n            </TrelloForm>\r\n        )\r\n    }\r\n\r\n    const renderCard = () => {\r\n        return (\r\n            <Draggable draggableId={String(id)} index={index}>\r\n                {provided => (\r\n                    <CardContainer\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        onDoubleClick={() => setIsEditing(true)}>\r\n                        <Card>\r\n                            <EditButton\r\n                                onMouseDown={() => setIsEditing(true)}\r\n                                fontSize=\"small\">\r\n                                edit\r\n                            </EditButton>\r\n                            <DeleteButton\r\n                                fontSize=\"small\"\r\n                                onMouseDown={handleDeleteCard}>\r\n                                delete\r\n                            </DeleteButton>\r\n                            <CardContent>\r\n                                <Typography gutterBottom>{text}</Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </CardContainer>\r\n                )}\r\n            </Draggable>\r\n        )\r\n    }\r\n\r\n    return isEditing ? renderEditForm() : renderCard()\r\n})\r\n\r\nexport default connect()(TrelloCard)\r\n","import React from 'react'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport styled from 'styled-components'\r\n\r\nconst TrelloOpenForm = ({ list, children, onClick }) => {\r\n    const buttonTextOpacity = list ? 1 : 0.5\r\n    const buttonTextColor = list ? 'white' : 'inherit'\r\n    const buttonTextBackground = list ? 'rgba(0,0,0,.15)' : 'inherit'\r\n\r\n    const OpenFormButton = styled.div`\r\n        display: flex;\r\n        align-items: center;\r\n        cursor: pointer;\r\n        border-radius: 3px;\r\n        height: 36px;\r\n        margin-left: 8px;\r\n        width: 300px;\r\n        padding-left: 10px;\r\n        padding-right: 10px;\r\n        opacity: ${buttonTextOpacity};\r\n        color: ${buttonTextColor};\r\n        background-color: ${buttonTextBackground};\r\n    `\r\n\r\n    return (\r\n        <OpenFormButton onClick={onClick}>\r\n            <Icon>add</Icon>\r\n            <p style={{ flexShrink: 0 }}>{children}</p>\r\n        </OpenFormButton>\r\n    )\r\n}\r\n\r\nexport default TrelloOpenForm\r\n","import React from 'react'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport TrelloButton from './TrelloButton'\r\nimport { connect } from 'react-redux'\r\nimport { addList, addCard } from '../actions'\r\nimport styled from 'styled-components'\r\nimport TrelloForm from './TrelloForm'\r\nimport TrelloOpenForm from './TrelloOpenForm'\r\n\r\nclass TrelloCreate extends React.PureComponent {\r\n    state = {\r\n        formOpen: false,\r\n        text: ''\r\n    }\r\n\r\n    openForm = () => {\r\n        this.setState({\r\n            formOpen: true\r\n        })\r\n    }\r\n\r\n    closeForm = () => {\r\n        this.setState({\r\n            formOpen: false\r\n        })\r\n    }\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleAddList = () => {\r\n        const { dispatch } = this.props\r\n        const { text } = this.state\r\n\r\n        if (text) {\r\n            this.setState({\r\n                text: ''\r\n            })\r\n            dispatch(addList(text))\r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    handleAddCard = () => {\r\n        const { dispatch, listID } = this.props\r\n        const { text } = this.state\r\n\r\n        if (text) {\r\n            this.setState({\r\n                text: ''\r\n            })\r\n            dispatch(addCard(listID, text))\r\n        }\r\n    }\r\n\r\n    renderOpenForm = () => {\r\n        const { list } = this.props\r\n\r\n        const buttonText = list ? 'Add another list' : 'Add another card'\r\n        const buttonTextOpacity = list ? 1 : 0.5\r\n        const buttonTextColor = list ? 'white' : 'inherit'\r\n        const buttonTextBackground = list ? 'rgba(0,0,0,.15)' : 'inherit'\r\n\r\n        const OpenFormButton = styled.div`\r\n            display: flex;\r\n            align-items: center;\r\n            cursor: pointer;\r\n            border-radius: 3px;\r\n            height: 36px;\r\n            margin-left: 8px;\r\n            width: 300px;\r\n            padding-left: 10px;\r\n            padding-right: 10px;\r\n            opacity: ${buttonTextOpacity};\r\n            color: ${buttonTextColor};\r\n            background-color: ${buttonTextBackground};\r\n        `\r\n\r\n        return (\r\n            <OpenFormButton onClick={this.openForm}>\r\n                <Icon>add</Icon>\r\n                <p style={{ flexShrink: 0 }}>{buttonText}</p>\r\n            </OpenFormButton>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { text } = this.state\r\n        const { list } = this.props\r\n        return this.state.formOpen ? (\r\n            <TrelloForm\r\n                text={text}\r\n                onChange={this.handleInputChange}\r\n                closeForm={this.closeForm}>\r\n                <TrelloButton\r\n                    onClick={list ? this.handleAddList : this.handleAddCard}>\r\n                    {list ? 'Add List' : 'Add Card'}\r\n                </TrelloButton>\r\n            </TrelloForm>\r\n        ) : (\r\n            <TrelloOpenForm list={list} onClick={this.openForm}>\r\n                {list ? 'Add another list' : 'Add another card'}\r\n            </TrelloOpenForm>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(TrelloCreate)\r\n","import React, { useState } from 'react'\r\nimport TrelloCard from './TrelloCard'\r\nimport TrelloCreate from './TrelloCreate'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport { editTitle, deleteList } from './../actions'\r\nimport Icon from '@material-ui/core/Icon'\r\n\r\nconst ListContainer = styled.div`\r\n    background-color: #dfe3e6;\r\n    border-radius: 3px;\r\n    width: 300px;\r\n    height: 100%;\r\n    padding: 8px;\r\n    margin-right: 8px;\r\n\r\n    h4 {\r\n        margin: 10px;\r\n\r\n        color: #172b4d;\r\n        font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\r\n            Noto Sans, Ubuntu, Droid Sans, Helvetica Neue, sans-serif;\r\n        font-size: 14px;\r\n    }\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n    width: 100%;\r\n    height: 100%;\r\n    border: none;\r\n    outline-color: blue;\r\n    border-radius: 3px;\r\n    margin-bottom: 3px;\r\n    padding: 5px;\r\n`\r\n\r\nconst TitleContainer = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    cursor: pointer;\r\n`\r\n\r\nconst DeleteButton = styled(Icon)`\r\n    cursor: pointer;\r\n`\r\n\r\nconst ListTitle = styled.h4`\r\n    transition: background 0.3s ease-in;\r\n    ${TitleContainer}:hover & {\r\n        background: #ccc;\r\n    }\r\n`\r\n\r\nconst TrelloList = ({ title, cards, listID, index, dispatch }) => {\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    const [listTitle, setListTitle] = useState(title)\r\n\r\n    const renderEditInput = () => {\r\n        return (\r\n            <from onSubmit={handleFinishEditing}>\r\n                <StyledInput\r\n                    type=\"text\"\r\n                    value={listTitle}\r\n                    onChange={handleChange}\r\n                    autoFocus\r\n                    onFocus={handleFocus}\r\n                    onBlur={handleFinishEditing}\r\n                />\r\n            </from>\r\n        )\r\n    }\r\n\r\n    const handleFocus = e => {\r\n        e.target.select()\r\n    }\r\n\r\n    const handleChange = e => {\r\n        e.preventDefault()\r\n        setListTitle(e.target.value)\r\n    }\r\n\r\n    const handleFinishEditing = () => {\r\n        setIsEditing(false)\r\n        dispatch(editTitle(listID, listTitle))\r\n    }\r\n\r\n    const handleDeleteList = () => {\r\n        dispatch(deleteList(listID))\r\n    }\r\n\r\n    return (\r\n        <Draggable draggableId={String(listID)} index={index}>\r\n            {provided => (\r\n                <ListContainer\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                    {...provided.dragHandleProps}>\r\n                    <Droppable droppableId={String(listID)} type=\"card\">\r\n                        {provided => (\r\n                            <div>\r\n                                <div>\r\n                                    {isEditing ? (\r\n                                        renderEditInput()\r\n                                    ) : (\r\n                                        <TitleContainer\r\n                                            onClick={() => setIsEditing(true)}>\r\n                                            <ListTitle>{listTitle}</ListTitle>\r\n                                            <DeleteButton\r\n                                                onClick={handleDeleteList}>\r\n                                                delete\r\n                                            </DeleteButton>\r\n                                        </TitleContainer>\r\n                                    )}\r\n                                </div>\r\n                                <div\r\n                                    {...provided.droppableProps}\r\n                                    ref={provided.innerRef}>\r\n                                    {cards.map((card, index) => (\r\n                                        <TrelloCard\r\n                                            key={card.id}\r\n                                            text={card.text}\r\n                                            id={card.id}\r\n                                            index={index}\r\n                                            listID={listID}\r\n                                        />\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                    <TrelloCreate listID={listID} />\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </ListContainer>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default connect()(TrelloList)\r\n","import React, { PureComponent } from 'react'\nimport TrelloList from './TrelloList'\nimport { connect } from 'react-redux'\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\nimport { sort } from './../actions'\nimport styled from 'styled-components'\nimport TrelloCreate from './TrelloCreate'\n\nconst ListContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n`\n\nclass App extends PureComponent {\n    onDragEnd = result => {\n        const { destination, source, draggableId, type } = result\n        if (!destination) {\n            return\n        }\n\n        this.props.dispatch(\n            sort(\n                source.droppableId,\n                destination.droppableId,\n                source.index,\n                destination.index,\n                draggableId,\n                type\n            )\n        )\n    }\n\n    render() {\n        const { lists, listOrder, cards } = this.props\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <h2>Trello Board</h2>\n                <Droppable\n                    droppableId=\"all-lists\"\n                    direction=\"horizontal\"\n                    type=\"list\">\n                    {provided => (\n                        <ListContainer\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}>\n                            {listOrder.map((listID, index) => {\n                                const list = lists[listID]\n                                if (list) {\n                                    const listCards = list.cards.map(\n                                        cardID => cards[cardID]\n                                    )\n\n                                    return (\n                                        <TrelloList\n                                            listID={list.id}\n                                            key={list.id}\n                                            title={list.title}\n                                            cards={listCards}\n                                            index={index}\n                                        />\n                                    )\n                                }\n                            })}\n                            {provided.placeholder}\n                            <TrelloCreate list />\n                        </ListContainer>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    lists: state.lists,\n    listOrder: state.listOrder,\n    cards: state.cards\n})\n\nexport default connect(mapStateToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport Store from './store'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport { createGlobalStyle } from 'styled-components'\nimport './index.css'\n// import $ from 'jquery'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nconst { persistor, store } = Store()\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    background-color: orange;\n    box-sizing: border-box;\n    transition: all 0.5s ease-in;\n  }\n`\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <GlobalStyle />\n            <App />\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n)\n\n// $(document).bind('DOMNodeRemoved', function(e) {\n//     console.log('Removed: ' + e.target.nodeName)\n// })\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}